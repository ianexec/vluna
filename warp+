#!/usr/bin/env bash
# ---------------------------------------------------------------
#  warp-setup.sh â€” Auto-setup Cloudflare WARP via WireGuard (wgcf)
#  Tested on Debian/Ubuntu/Rocky/Alma/CentOS 8+/Fedora/Arch/Alpine
#  Features:
#   - Installs dependencies & wgcf
#   - Registers WARP (free) or with WARP+ license (optional)
#   - Generates /etc/wireguard/wgcf.conf
#   - One-command up/down/status & systemd service
#   - Modes: full-tunnel, IPv4-only, exclude local subnets
# ---------------------------------------------------------------
set -euo pipefail

WG_NAME="wgcf"
WG_CONF="/etc/wireguard/${WG_NAME}.conf"
WGCF_BIN="/usr/local/bin/wgcf"
WGCF_ACCT="wgcf-account.toml"
WGCF_PROF="wgcf-profile.conf"
ARCH=$(uname -m)
OS=$(awk -F= '/^ID=/{gsub("\"",""); print $2}' /etc/*-release | head -n1 || echo "linux")

msg() { printf "\033[1;32m[+]\033[0m %s\n" "$*"; }
warn(){ printf "\033[1;33m[!]\033[0m %s\n" "$*"; }
err() { printf "\033[1;31m[x]\033[0m %s\n" "$*"; exit 1; }
need_root(){ [[ $EUID -eq 0 ]] || err "Run as root (sudo -i)."; }

# --- detect pkg manager & install deps -------------------------------------
install_deps(){
  msg "Installing dependencies (wireguard-tools, curl, iproute2)..."
  if command -v apt >/dev/null 2>&1; then
    apt update
    apt install -y wireguard-tools iproute2 iptables curl jq ca-certificates
  elif command -v dnf >/dev/null 2>&1; then
    dnf install -y wireguard-tools iproute iptables curl jq ca-certificates
  elif command -v yum >/dev/null 2>&1; then
    yum install -y epel-release || true
    yum install -y wireguard-tools iproute iptables curl jq ca-certificates
  elif command -v pacman >/dev/null 2>&1; then
    pacman -Sy --noconfirm wireguard-tools iproute2 iptables curl jq ca-certificates
  elif command -v apk >/dev/null 2>&1; then
    apk add --no-cache wireguard-tools iproute2 iptables curl jq ca-certificates
  else
    err "Unsupported distro. Install wireguard-tools, iproute2, iptables, curl, jq manually."
  fi
}

# --- download wgcf ----------------------------------------------------------
arch_map(){
  case "$ARCH" in
    x86_64|amd64) echo "linux_amd64";;
    aarch64|arm64) echo "linux_arm64";;
    armv7l|armv7) echo "linux_arm";;
    i386|i686) echo "linux_386";;
    *) err "Unsupported arch: $ARCH";;
  esac
}

install_wgcf(){
  if [[ -x "$WGCF_BIN" ]]; then msg "wgcf already installed"; return; fi
  local tag api url asset tmp
  msg "Fetching latest wgcf release..."
  api=$(curl -fsSL https://api.github.com/repos/ViRb3/wgcf/releases/latest)
  tag=$(echo "$api" | jq -r .tag_name)
  asset="wgcf_$(arch_map).tar.gz"
  url=$(echo "$api" | jq -r ".assets[] | select(.name==\"$asset\").browser_download_url")
  [[ -n "$url" ]] || err "Failed to resolve wgcf download URL"
  tmp=$(mktemp -d)
  curl -fL "$url" -o "$tmp/wgcf.tgz"
  tar -xzf "$tmp/wgcf.tgz" -C "$tmp"
  install -m 0755 "$tmp/wgcf" "$WGCF_BIN"
  rm -rf "$tmp"
  msg "wgcf ${tag} installed to $WGCF_BIN"
}

# --- register & generate profile -------------------------------------------
wgcf_register(){
  if [[ -f "$WGCF_ACCT" ]]; then
    msg "wgcf account already exists"
  else
    yes | $WGCF_BIN register || err "wgcf register failed"
    msg "wgcf registered -> $WGCF_ACCT"
  fi
}

wgcf_set_license(){
  local lic=${1:-}
  if [[ -n "$lic" ]]; then
    msg "Applying WARP+ license"
    $WGCF_BIN update --license-key "$lic" || warn "License apply failed; proceeding with free WARP"
  fi
}

wgcf_generate(){
  $WGCF_BIN generate || true
  [[ -f "$WGCF_PROF" ]] || err "wgcf-profile not generated"
  # Normalize endpoint & make sane defaults
  sed -i "s/^Endpoint.*/Endpoint = engage.cloudflareclient.com:2408/" "$WGCF_PROF"
  # Create final conf path
  install -d /etc/wireguard
  cp "$WGCF_PROF" "$WG_CONF"
  chmod 600 "$WG_CONF"
  # PostUp rules: preserve local networks
  if ! grep -q "PostUp" "$WG_CONF"; then
    cat >>"$WG_CONF" <<'EOF'
PostUp = ip -4 route add 192.168.0.0/16 dev %i table 51820; ip -4 rule add from 192.168.0.0/16 table 51820; ip -4 rule add to 192.168.0.0/16 table 51820; ip -4 route add 10.0.0.0/8 dev %i table 51820; ip -4 route add 172.16.0.0/12 dev %i table 51820
PostDown = ip -4 rule del from 192.168.0.0/16 table 51820 || true; ip -4 rule del to 192.168.0.0/16 table 51820 || true
EOF
  fi
  msg "Config written to $WG_CONF"
}

# --- modes ------------------------------------------------------------------
set_mode_full(){
  msg "Setting mode: FULL (IPv4+IPv6 through WARP)"
  sed -i "s/^AllowedIPs.*/AllowedIPs = 0.0.0.0\/0, ::\/0/" "$WG_CONF"
}

set_mode_ipv4(){
  msg "Setting mode: IPv4-only via WARP (keep native IPv6)"
  sed -i "s/^AllowedIPs.*/AllowedIPs = 0.0.0.0\/0/" "$WG_CONF"
}

set_mode_split_local(){
  msg "Setting mode: Exclude local subnets (already handled in PostUp)"
  # Nothing else to do; PostUp rules cover it
}

# --- control ----------------------------------------------------------------
wg_up(){ sysctl -w net.ipv4.ip_forward=1 >/dev/null || true; wg-quick up "$WG_NAME"; }
wg_down(){ wg-quick down "$WG_NAME" || true; }
wg_status(){ wg show "$WG_NAME" 2>/dev/null || { warn "Interface down"; ip a show "$WG_NAME" || true; }; }

enable_service(){
  if command -v systemctl >/dev/null 2>&1; then
    systemctl enable --now "wg-quick@${WG_NAME}.service"
    msg "Enabled systemd service: wg-quick@${WG_NAME}"
  else
    warn "systemd not found; enable on-boot manually"
  fi
}

disable_service(){
  if command -v systemctl >/dev/null 2>&1; then
    systemctl disable --now "wg-quick@${WG_NAME}.service" || true
    msg "Disabled systemd service"
  fi
}

uninstall_all(){
  wg_down || true
  disable_service || true
  rm -f "$WG_CONF" "$WGCF_BIN" "$WGCF_ACCT" "$WGCF_PROF"
  msg "Removed config and wgcf binary. WireGuard tools kept."
}

# --- menu -------------------------------------------------------------------
usage(){
  cat <<USAGE
Usage: $0 <command> [args]
Commands:
  install                 Install deps + wgcf
  register                Register WARP account (free)
  license <KEY>           Apply WARP+ license (optional)
  generate                Generate WireGuard profile -> $WG_CONF
  mode full|ipv4|split    Set routing mode
  up                      Bring interface up now
  down                    Bring interface down
  status                  Show WireGuard status
  enable                  Enable auto-start (systemd)
  disable                 Disable auto-start
  uninstall               Remove config & wgcf (keeps wireguard-tools)

Quick start (all-in-one):
  sudo bash $0 install register generate mode full up enable
USAGE
}

main(){
  need_root
  local cmd=${1:-}
  case "$cmd" in
    install) install_deps; install_wgcf ;;
    register) install_wgcf; wgcf_register ;;
    license) shift || true; wgcf_set_license "${1:-}" ;;
    generate) wgcf_generate ;;
    mode) shift || true; case "${1:-}" in full) set_mode_full;; ipv4) set_mode_ipv4;; split) set_mode_split_local;; *) err "mode must be: full|ipv4|split";; esac ;;
    up) wg_up ;;
    down) wg_down ;;
    status) wg_status ;;
    enable) enable_service ;;
    disable) disable_service ;;
    uninstall) uninstall_all ;;
    *) usage ;;
  esac
}

main "$@"
